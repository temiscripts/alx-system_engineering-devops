# HAproxy Configuration for Distributed Web Infrastructure
# File: /etc/haproxy/haproxy.cfg

global
    # Run as daemon
    daemon
    
    # Security settings
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Secure SSL configuration
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

    # Logging
    log stdout local0

defaults
    # Default mode
    mode http
    
    # Logging
    log global
    option httplog
    option dontlognull
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    
    # Health checks
    option httpchk
    
    # Error files
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend - Entry point for client requests
frontend web_frontend
    # Bind to port 80 for HTTP
    bind *:80
    
    # Future HTTPS binding (uncomment when SSL certificates are available)
    # bind *:443 ssl crt /etc/ssl/certs/foobar.com.pem
    
    # Default backend
    default_backend web_servers
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # Optional: Redirect HTTP to HTTPS (enable when SSL is configured)
    # redirect scheme https if !{ ssl_fc }

# Backend - Pool of web servers
backend web_servers
    # Load balancing algorithm: Round Robin
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Additional health check options
    option log-health-checks
    option tcp-check
    
    # Server definitions
    # Each server entry includes:
    # - server name
    # - IP:port
    # - check (enable health checks)
    # - additional options
    
    server web1 10.0.0.2:80 check inter 2000ms rise 2 fall 3
    server web2 10.0.0.3:80 check inter 2000ms rise 2 fall 3
    
    # Server options explanation:
    # check - Enable health checks
    # inter 2000ms - Check interval (2 seconds)
    # rise 2 - Server considered UP after 2 successful checks
    # fall 3 - Server considered DOWN after 3 failed checks

# Statistics and monitoring interface
listen stats
    # Bind to port 8080 for statistics
    bind *:8080
    
    # Enable statistics
    stats enable
    stats uri /stats
    stats realm HAproxy\ Load\ Balancer\ Statistics
    
    # Authentication (change in production!)
    stats auth admin:password123
    
    # Additional statistics options
    stats refresh 30s
    stats show-node
    stats show-legends
    
    # Enable admin interface (for manual server management)
    stats admin if TRUE

# Alternative load balancing algorithms (examples)
# You can replace "balance roundrobin" with any of these:

# Least connections - routes to server with fewest active connections
# balance leastconn

# Source IP hash - same client always goes to same server
# balance source

# URI hash - distributes based on URI
# balance uri

# Header hash - distributes based on HTTP header
# balance hdr(host)

# Round robin with weights
# balance roundrobin
# server web1 10.0.0.2:80 check weight 100
# server web2 10.0.0.3:80 check weight 150  # This server gets 50% more traffic

# Advanced configuration examples:

# Backend with session persistence (sticky sessions)
# backend web_servers_sticky
#     balance roundrobin
#     cookie SERVERID insert indirect nocache
#     server web1 10.0.0.2:80 check cookie web1
#     server web2 10.0.0.3:80 check cookie web2

# Backend with SSL health checks
# backend web_servers_ssl
#     balance roundrobin
#     option httpchk GET /health
#     option ssl-hello-chk
#     server web1 10.0.0.2:443 check ssl verify none
#     server web2 10.0.0.3:443 check ssl verify none

# Backup server configuration
# backend web_servers_with_backup
#     balance roundrobin
#     option httpchk GET /health
#     server web1 10.0.0.2:80 check
#     server web2 10.0.0.3:80 check
#     server backup 10.0.0.5:80 check backup  # Only used if others fail

# Rate limiting configuration
# frontend web_frontend_with_limits
#     bind *:80
#     # Limit to 10 requests per second per client
#     stick-table type ip size 100k expire 30s store http_req_rate(10s)
#     http-request track-sc0 src
#     http-request deny if { sc_http_req_rate(0) gt 10 }
#     default_backend web_servers

# ACL (Access Control List) examples
# frontend web_frontend_with_acls
#     bind *:80
#     
#     # Define ACLs
#     acl is_admin path_beg /admin
#     acl is_api path_beg /api
#     acl allowed_ips src 192.168.1.0/24
#     
#     # Use ACLs for routing
#     use_backend admin_servers if is_admin allowed_ips
#     use_backend api_servers if is_api
#     default_backend web_servers

# Health check customization
# backend web_servers_custom_check
#     balance roundrobin
#     option httpchk GET /custom-health-check
#     http-check expect string "HEALTHY"
#     http-check send-state
#     server web1 10.0.0.2:80 check port 8080 inter 5s
#     server web2 10.0.0.3:80 check port 8080 inter 5s

# Configuration validation:
# To test this configuration, run: haproxy -f /etc/haproxy/haproxy.cfg -c
# To reload configuration: systemctl reload haproxy

# Monitoring endpoints:
# Statistics: http://load_balancer_ip:8080/stats
# Health status in stats page shows server status
# JSON stats: http://load_balancer_ip:8080/stats;csv
